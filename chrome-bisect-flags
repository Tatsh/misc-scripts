#!/usr/bin/env python
from argparse import Namespace
from copy import deepcopy
from os.path import expanduser
from time import sleep
from typing import Sequence, TypedDict, cast
import argparse
import json
import subprocess as sp
import sys


class LocalStateBrowser(TypedDict):
    enabled_labs_experiments: Sequence[str]


class LocalState(TypedDict):
    browser: LocalStateBrowser


def start_test(flags: Sequence[str], local_state: LocalState, subprocess_name: str, ls_path: str,
               sleep_time: float) -> tuple[bool, str | None]:
    """
    Returns ``True`` if:
    - there are no more flags (problem flag not found)
    - if there is only one flag left (problem flag possibly found)
    - if the problematic flag exists within the passed in flags
    """
    len_flags = len(flags)
    if len_flags == 0:
        print('Could not find the problem flag', file=sys.stderr)
        return True, None
    print('Testing flags:')
    for flag in flags:
        print(f'- {flag}')
    local_state['browser']['enabled_labs_experiments'] = flags
    with open(ls_path, 'w+') as f:
        json.dump(local_state, f, allow_nan=False)
    input('Start browser and test for the issue, then press enter')
    sp.run(('killall', subprocess_name), stderr=sp.PIPE, stdout=sp.PIPE, check=False)
    sleep(sleep_time)
    at_fault = input('Did the problem occur? ').lower().startswith('y')
    return at_fault, flags[0] if at_fault and len_flags == 1 else None


def do_test(flags: Sequence[str], ls_path: str, subprocess_name: str, sleep_time: float,
            local_state: LocalState) -> str | None:
    len_flags = len(flags)
    if len_flags < 2:
        return flags[0] if len_flags == 1 else None
    done, bad_flag = start_test(flags[:len_flags // 2], deepcopy(local_state), subprocess_name,
                                ls_path, sleep_time)
    if done:
        return bad_flag or do_test(flags[:len_flags // 2], ls_path, subprocess_name, sleep_time,
                                   local_state)
    done, bad_flag = start_test(flags[len_flags // 2:], deepcopy(local_state), subprocess_name,
                                ls_path, sleep_time)
    if done:
        return bad_flag or do_test(flags[len_flags // 2:], ls_path, subprocess_name, sleep_time,
                                   local_state)
    return None


class Args(Namespace):
    local_state_path: str
    subprocess_name: str
    sleep_time: float


def main() -> int:
    parser = argparse.ArgumentParser(description='Determine which flag is causing an issue in '
                                     'Chrome or any Chromium-based browser.')
    parser.add_argument('local_state_path',
                        metavar='LOCAL_STATE_PATH',
                        nargs='?',
                        help='Path to a "Local State" file',
                        default=expanduser('~/.config/google-chrome/Local State'))
    parser.add_argument('-s',
                        '--subprocess-name',
                        default='chrome',
                        help='Chromium-based browser subprocess name such as "chrome"')
    parser.add_argument(
        '--sleep-time',
        default=0.5,
        type=float,
        help='Time to sleep after attempting to kill the browser processes in seconds.')
    args = cast(Args, parser.parse_args())
    print(f'Using "{args.local_state_path}"', file=sys.stderr)
    with open(args.local_state_path, 'r') as f:
        local_state_data = json.load(f)
        flags = local_state_data['browser']['enabled_labs_experiments']
        len_flags = len(flags)
        if len_flags == 0:
            print('Nothing to test', file=sys.stderr)
            return 1
    bad_flag = None
    try:
        input('Exit the browser and press any key')
        bad_flag = do_test(flags, args.local_state_path, args.subprocess_name, args.sleep_time,
                           local_state_data)
    except Exception:  # pylint: disable=broad-exception-caught
        return 1
    finally:
        if bad_flag:
            local_state_data['browser']['enabled_labs_experiments'] = [
                x for x in local_state_data['browser']['enabled_labs_experiments'] if x != bad_flag
            ]
        with open(args.local_state_path, 'w+') as f:
            json.dump(local_state_data, f, sort_keys=True, indent=2, allow_nan=False)
        if not bad_flag:
            print('Restored original "Local State"', file=sys.stderr)
        else:
            print(f'Saved "Local State" with "{bad_flag}" removed', file=sys.stderr)
    return 0


if __name__ == '__main__':
    sys.exit(main())
