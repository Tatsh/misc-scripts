#!/usr/bin/env python
# PYTHON_ARGCOMPLETE_OK
from functools import lru_cache
from os import devnull, environ, makedirs
from os.path import basename, expanduser, isdir, join as path_join
from shlex import quote
from shutil import rmtree
from typing import Any, Final, Literal, Mapping, Sequence, cast
import argparse
import logging
import subprocess as sp
import sys

import argcomplete

VERSION_MAPPING: Final[Mapping[str, str]] = {
    '10': 'win10',
    'vista': 'vista',
    '2k3': 'win2k3',
    '7': 'win7',
    '8': 'win8',
    'xp': 'winxp',
    '81': 'win81',
    # 32-bit only
    '2k': 'win2k',
    '98': 'win98',
    '95': 'win95'
}


class Args(argparse.Namespace):
    prefix_name: str
    thirty2bit: bool
    no_xdg: bool
    windows_version: Sequence[Literal['10', 'vista', '2k3', '7', '8', 'xp', '81', '2k', '98', '95']]
    sandbox: bool
    vd: str  # pylint: disable=invalid-name
    verbose: bool


@lru_cache()
def setup_logging_stderr(name: str | None = None, verbose: bool = False) -> logging.Logger:
    name = name if name else basename(sys.argv[0])
    log = logging.getLogger(name)
    log.setLevel(logging.DEBUG if verbose else logging.INFO)
    channel = logging.StreamHandler(sys.stderr)
    channel.setFormatter(logging.Formatter('%(message)s'))
    channel.setLevel(logging.DEBUG if verbose else logging.INFO)
    log.addHandler(channel)
    return log


def run(args: Any, **kwargs: Any) -> sp.CompletedProcess[str]:
    log = setup_logging_stderr(verbose=kwargs.pop('verbose', False))
    if kwargs.get('env'):
        log.debug('Environment: %s', kwargs['env'])
    log.debug('Running: %s', ' '.join(map(quote, args)))
    kwargs.pop('check')
    return sp.run(args, check=True, **kwargs)


def wine(args: Args) -> int:
    log = setup_logging_stderr(verbose=args.verbose)
    prefix_name: Final[str] = args.prefix_name
    prefix_root = expanduser('~/.local/share/wineprefixes')
    makedirs(prefix_root, mode=0o755, exist_ok=True)
    target = path_join(prefix_root, prefix_name)
    o_target = target
    if isdir(target):
        log.error('Not touching existing prefix at %s', target)
        return 1
    arch: Final[Literal['win32', 'win64']] = ('win32' if args.thirty2bit else 'win64')
    env: Final[dict[str, str]] = dict(WINEPREFIX=target,
                                      DISPLAY=environ.get('DISPLAY', ''),
                                      XAUTHORITY=environ.get('XAUTHORITY', ''),
                                      WINEARCH=environ.get('WINEARCH', arch))
    if not env['DISPLAY']:
        env['DISPLAY'] = ':0'
    if args.no_xdg:
        try:
            run(
                ('wine', 'reg', 'add', r'HKCU\Software\Wine\DllOverrides', '/t', 'REG_SZ', '/v',
                 'winemenubuilder.exe', '/f'),
                env=env,
                check=True,
                stdout=open(devnull, 'w'),  # pylint: disable=consider-using-with
                stderr=sp.STDOUT)
        except (sp.CalledProcessError, KeyboardInterrupt):
            rmtree(o_target)
            return 1
    target = quote(target)
    try:
        winetricks: str | None = run(('sh', '-c', 'command -v winetricks'),
                                     stdout=sp.PIPE,
                                     stderr=sp.PIPE,
                                     check=True,
                                     encoding='utf-8').stdout.strip()
    except sp.CalledProcessError:
        winetricks = None
    if not winetricks:
        log.error('Winetricks is not installed.')
        return 1
    prefix_arg = f'prefix={prefix_name}'
    winetricks_args = [winetricks, prefix_arg, VERSION_MAPPING[args.windows_version[0]]]
    if args.sandbox:
        winetricks_args.append('isolate_home')
        winetricks_args.append('sandbox')
    if args.vd != 'off':
        winetricks_args.append(f'vd={args.vd[0]}')
    try:
        run(winetricks_args, check=True, stdout=sp.PIPE, encoding='utf-8')
    except sp.CalledProcessError as e:
        log.warning('Winetricks exit code was %d but it may have succeeded', e.returncode)
        log.warning('%s', e.output)
    except KeyboardInterrupt:
        rmtree(o_target)
        return 1
    wineprefix_env = quote(f'WINEPREFIX={target}')
    print(f'''Run `export WINEPREFIX={target}` before running wine or use env:

env {wineprefix_env} wine ...

If you ran this with eval, your shell is ready.''',
          file=sys.stderr)
    print(f'export {wineprefix_env}')
    ps1_env = f'PS1={prefix_name}🍷$PS1'
    print(f'export {ps1_env}')
    return 0


def main() -> int:
    parser = argparse.ArgumentParser(
        description='Create a Wine prefix with custom settings',
        epilog='This should be used with eval: eval $(mkwineprefix ...)')
    parser.add_argument('--no-xdg', action='store_true', help='Disable winemenubuilder.exe')
    parser.add_argument('--32', help='Use 32-bit prefix', dest='thirty2bit', action='store_true')
    parser.add_argument('-V',
                        '--windows-version',
                        default=['xp'],
                        help='Windows version',
                        nargs=1,
                        choices=VERSION_MAPPING.keys())
    parser.add_argument('-S', '--sandbox', action='store_true', help='Sandbox the prefix')
    parser.add_argument('--vd',
                        metavar='SIZE',
                        nargs=1,
                        default='off',
                        help='Virtual desktop size, e.g. 1024x768.')
    parser.add_argument('-v', '--verbose', action='store_true')
    parser.add_argument('prefix_name')
    argcomplete.autocomplete(parser)
    return wine(cast(Args, parser.parse_args()))


if __name__ == '__main__':
    sys.exit(main())
