#!/usr/bin/env python
# PYTHON_ARGCOMPLETE_OK
from functools import lru_cache
from os import chdir, getcwd, listdir, remove as rm, rename
from os.path import basename, dirname, isdir, realpath
from typing import Iterator, Sequence, cast
from zipfile import ZipFile
import argparse
import logging
import re
import subprocess as sp
import sys

import argcomplete


@lru_cache()
def setup_logging_stdout(name: str | None = None, verbose: bool = False) -> logging.Logger:
    name = name if name else basename(sys.argv[0])
    log = logging.getLogger(name)
    log.setLevel(logging.DEBUG if verbose else logging.INFO)
    channel = logging.StreamHandler(sys.stdout)
    channel.setFormatter(logging.Formatter('%(message)s'))
    channel.setLevel(logging.DEBUG if verbose else logging.INFO)
    log.addHandler(channel)
    return log


def extract_rar_from_zip(zip_file: ZipFile) -> Iterator[str]:
    for x in (x for x in zip_file.namelist() if re.search(r'\.r(?:ar|\d{2})$', x)):
        zip_file.extract(x)
        yield x


def unrar_x(rar: str) -> None:
    sp.check_call(('unrar', 'x', '-y', rar))


class Namespace(argparse.Namespace):
    directories: Sequence[str]


def main() -> int:
    log = setup_logging_stdout()
    parser = argparse.ArgumentParser()
    parser.add_argument('directories', nargs='+')
    argcomplete.autocomplete(parser)
    args = cast(Namespace, parser.parse_args())
    for _dir in args.directories:
        if not isdir(_dir):
            log.error('Directory argument %s is invalid', _dir)
            return 1
    for _dir in args.directories:
        last = getcwd()
        chdir(_dir)
        # pylint: disable=consider-using-with
        zip_listing = frozenset(ZipFile(x) for x in listdir('.') if x.endswith('.zip'))
        if len(zip_listing) == 0:
            log.warning('No zip files found. Skipping directory %s', _dir)
            continue
        _rar_list = (extract_rar_from_zip(x) for x in zip_listing)
        extracted = [x for y in _rar_list for x in y]
        # Only need the .rar
        rar = [x for x in extracted if x.endswith('.rar')]
        unrar_x(rar[0])
        pdf = [x for x in listdir('.') if x.lower().endswith('.pdf')]
        epub = [x for x in listdir('.') if x.lower().endswith('.epub')]
        ext = 'pdf'
        pdf_name = None
        if pdf:
            if len(pdf) > 1:
                log.warning(
                    'More than one PDF extracted. Not sure what to do. '
                    'Skipping directory %s', _dir)
                continue
            with open(pdf[0], 'rb') as f:
                if f.read(4) != b'%PDF':
                    log.warning('PDF file extracted but is not a PDF. Skipping '
                                'directory %s', _dir)
                    continue
            pdf_name = basename(dirname(realpath(pdf[0])))
        elif epub:
            if len(epub) > 1:
                log.warning(
                    'More than one ePub extracted. Not sure what to do. '
                    'Skipping directory %s', _dir)
                continue
            pdf_name = basename(dirname(realpath(epub[0])))
            ext = 'epub'
            pdf = epub
        assert pdf_name is not None
        target_name = f'../{pdf_name}.{ext}'
        rename(pdf[0], target_name)
        for zip_file in zip_listing:
            zip_file.close()
        for x in extracted:
            rm(x)
        chdir(last)
    return 0


if __name__ == '__main__':
    sys.exit(main())
