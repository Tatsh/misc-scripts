#!/usr/bin/env python
# PYTHON_ARGCOMPLETE_OK
from typing import Final, Iterable, Mapping, Match, Sequence, cast
import argparse
import re
import sys

import argcomplete

ENGLISH_MODE: Final[int] = 1
JAPANESE_MODE: Final[int] = 1 << 1
CHINESE_MODE: Final[int] = 1 << 2
ARABIC_MODE: Final[int] = 1 << 3
ENGLISH_ORDINAL_RE: Final[str] = r'(\d+)(st|nd|rd|th)'
# non-strict, not including words like below, forms of to be, forms of
#   you/he/etc, or words like 'call'
STOP_WORDS: Final[Sequence[str]] = (
    'a',
    'an',
    'and',
    'at',
    'by',
    'de',  # mainly for Spanish and French
    'el',  # Spanish
    'feat',
    'featuring',
    'for',
    'from',
    'il',  # Italian
    'in',
    'into',
    'la',  # Spanish/French/Italian
    'lo',  # Italian
    'of',
    'off',
    'on',
    'or',
    'per',
    'por',  # Spanish
    # 'so',
    'te',  # Spanish/French
    # 'than',
    'the',
    # 'then',
    # 'this',
    'to',
    # 'too',
    'van',
    'via',
    'von',
    'vs',
    'with',
    'within',
    'without')
# English abbreviations for period removal
ENGLISH_ABBREV: Final[Sequence[str]] = ('feat', 'mr', 'mrs', 'ms', 'vs')
# Only really common ones
JAPANESE_PARTICLES: Final[Sequence[str]] = ('de', 'e', 'ga', 'ha', 'ka', 'kana', 'ne', 'ni', 'no',
                                            'to', 'wa', 'wo')
CHINESE_PARTICLES: Final[Sequence[str]] = ('de', 'ge', 'he', 'le', 'ma')
# NOTE This list is not yet complete
ARABIC_STOPS: Final[Sequence[str]] = ('al', 'ala', 'alayhi', 'alayka', 'alayya', 'an', 'anhu',
                                      'anka', 'anni', 'bi', 'biha', 'bihi', 'bika', 'fi', 'fihi',
                                      'fika', 'fiya', 'ila', 'ilayhi', 'ilayka', 'ilayya', 'lahu',
                                      'laka', 'li', 'maa', 'maahu', 'maaka', 'mai', 'min', 'minhu',
                                      'minka', 'minni', 'wa')
NAMES: Final[Mapping[str, str]] = {
    "mcdonald's": "McDonald's",  # pylint: disable=invalid-string-quote
    'Arkit': 'ARKit',
    'Imessage': 'iMessage',
    'Ios': 'iOS',  # Not Cisco IOS
    'Itunes': 'iTunes',
    'LLVM': 'LLVM',
    'Macos': 'macOS',
    'Mapkit': 'MapKit',
    'Pdfkit': 'PDFKit',
    'S3RL': 'S3RL',
    'Sirikit': 'SiriKit',
    'Tvos': 'tvOS',
    'Watchos': 'watchOS',
    'Whats': "What's",  # pylint: disable=invalid-string-quote
    'Wkwebview': 'WKWebView',
    'Wwdc': 'WWDC',
    'mcdonald': 'McDonald',
    'mcdonalds': 'McDonald\'s',
}
MODE_MAP: Final[Mapping[int, Sequence[str]]] = {
    ARABIC_MODE: ARABIC_STOPS,
    CHINESE_MODE: CHINESE_PARTICLES,
    ENGLISH_MODE: STOP_WORDS,
    JAPANESE_MODE: JAPANESE_PARTICLES,
}


def get_name(word: str) -> str | None:
    word = word.lower()
    for name, output in NAMES.items():
        if name.lower() == word:
            return output
    return None


def is_roman_numeral(string: str) -> bool:
    if not string:
        return False
    # https://l.tat.sh/2HXEIyx
    return re.match(r'^M{0,4}(CM|CD|D?C{0,3})(XC|XL|L?X{0,3})(IX|IV|V?I{0,3})$', string,
                    re.I) is not None


def fix_apostrophes(word: str) -> str:
    if "'" not in word:  # pylint: disable=invalid-string-quote
        return word
    return re.sub(
        r"[A-Za-z]+('[A-Za-z]+)?",  # pylint: disable=invalid-string-quote
        lambda mo: mo.group(0)[0].upper() + mo.group(0)[1:].lower(),
        word)


def lower_stop(words: str,
               modes: Iterable[int] = (ENGLISH_MODE,),
               disable_names: bool = False,
               ampersands: bool = False) -> str:
    original_words = words.strip().split()
    word_list = words.strip().title().split()
    name = get_name(word_list[0])

    if name is not None:
        title = [name]
    elif word_list[0].upper() == original_words[0]:
        title = [fix_apostrophes(original_words[0])]
    else:
        title = [fix_apostrophes(word_list[0])]

    if is_roman_numeral(title[0]):
        title = [title[0].upper()]

    last_index = len(original_words) - 1
    ignore_roman = ['mix']

    for mode in modes:
        to_lower_case_array = MODE_MAP[mode]
        index = 1
        for word in word_list[1:]:
            if disable_names is False:
                name = get_name(word)
                if name is not None:
                    try:
                        title[index] = name
                    except IndexError:
                        title.append(name)
                    index += 1
                    continue

            # Detect an upper-case word not to change
            if original_words[index] == word.upper() and \
                    not re.match(r'[^\w]', word):

                # Detect I (not Roman numeral necessarily)
                if mode == ENGLISH_MODE and word == 'I':
                    pass
                # ???
                elif index == last_index and \
                        re.match(r'[A-Z0-9]+', original_words[index]):
                    title.append(original_words[index])
                    continue

            begin = end = ''

            if re.match(r'^\W', word):
                begin = cast(Match[str], re.match(r'^(\W+)', word)).groups()[0]
                word = word[1:]

            if re.match(r'\w+\W$', word):
                end = cast(Match[str], re.match(r'\w+(\W+)$', word)).groups()[0]
                word = word[0:-1]

            if word.lower() in to_lower_case_array:
                word = word_list[index] = word.lower()

            if "'" in word:  # pylint: disable=invalid-string-quote
                word = fix_apostrophes(word)

            # MIX is a roman numeral but is more typically used in a sequence
            # like 'Extended Mix', so do not capitalise it
            if is_roman_numeral(word) and word.lower() not in ignore_roman:
                word = word.upper()

            if mode == ENGLISH_MODE and word.lower() in ENGLISH_ABBREV:
                end = ''

            ordinal_match = re.match(ENGLISH_ORDINAL_RE, word, flags=re.I)
            if mode == ENGLISH_MODE and ordinal_match is not None:
                word = (ordinal_match.group(1) + ordinal_match.group(2).lower())

            word = f'{begin}{word}{end}'

            try:
                title[index] = word
            except IndexError:
                title.append(word)

            index += 1

    title_ = ' '.join(title)
    if ampersands:
        title_ = title_.replace(' and ', ' & ')
    return title_


class Namespace(argparse.Namespace):
    ampersands: bool
    mode: Iterable[int] | None
    no_names: bool
    titles: Iterable[str]


def main() -> int:
    parser = argparse.ArgumentParser(
        description='Title fixer for various languages. Defaults to English '
        'mode. If any option is specified without -e, English mode is '
        'disabled.')
    parser.add_argument('titles',
                        metavar='TITLE',
                        type=argparse.FileType('r'),
                        default=sys.stdin,
                        nargs='?',
                        help='Titles to process')
    parser.add_argument('-e',
                        dest='mode',
                        action='append_const',
                        const=ENGLISH_MODE,
                        help='Enable English mode')
    parser.add_argument('-c',
                        dest='mode',
                        action='append_const',
                        const=CHINESE_MODE,
                        help='Enable Chinese mode')
    parser.add_argument('-j',
                        dest='mode',
                        action='append_const',
                        const=JAPANESE_MODE,
                        help='Enable Japanese mode')
    parser.add_argument('-a',
                        dest='mode',
                        action='append_const',
                        const=ARABIC_MODE,
                        help='Enable Arabic mode')
    parser.add_argument('--no-names',
                        action='store_true',
                        help='Disable name checking',
                        dest='no_names',
                        default=False)
    parser.add_argument('-s',
                        '--ampersands',
                        action='store_true',
                        help='Replace " and " with " & "',
                        default=False)
    argcomplete.autocomplete(parser)
    args = cast(Namespace, parser.parse_args())
    for title in args.titles:
        print(
            lower_stop(title,
                       args.mode or (ENGLISH_MODE,),
                       args.no_names,
                       ampersands=args.ampersands))
    return 0


if __name__ == '__main__':
    sys.exit(main())
