#!/usr/bin/env python
# PYTHON_ARGCOMPLETE_OK
from os.path import basename
from typing import Any, Final, Sequence, cast
import argparse
import logging
import sys

from requests.adapters import HTTPAdapter
from requests.structures import CaseInsensitiveDict
import argcomplete
import requests

GET_URL: Final[str] = 'https://tools.usps.com/go/TrackConfirmAction'
POST_URL: Final[str] = ('https://tools.usps.com/go/'
                        'TrackConfirmRequestUpdateAJAXAction.action')
NAME1_EMPTY_VALUE: Final[str] = 'not required'
MAX_RETRIES: Final[int] = 10
HEADERS: Final[CaseInsensitiveDict[str]] = CaseInsensitiveDict({
    'Accept-Language': 'en-US,en;q=0.8,en-GB;q=0.6',
    'Connection': 'keep-alive',
    'Accept': 'text/html,application/xhtml+xml,'
              'application/xml;q=0.9,*/*;q=0.8',
    'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_3) '
                  'AppleWebKit/537.36 (KHTML, like Gecko) '
                  'Chrome/66.0.3359.45 '
                  'Safari/537.36',
    'DNT': '1',
    'Pragma': 'no-cache',
    'Cache-Control': 'no-cache',
})


class Namespace(argparse.Namespace):
    debug: bool
    phone_number: Sequence[str]
    tracking_number: Sequence[str]


def main() -> int:
    parser = argparse.ArgumentParser(basename(sys.argv[0]))
    parser.add_argument('tracking_number',
                        nargs='+',
                        metavar='TRACKING_NUMBER',
                        help='Tracking numbers')
    parser.add_argument('phone_number',
                        nargs=1,
                        metavar='PHONE_NUMBER',
                        help='Phone number to send SMS to (US only)')
    parser.add_argument('-d', '--debug', action='store_true')
    argcomplete.autocomplete(parser)
    args = cast(Namespace, parser.parse_args())
    phone_number = args.phone_number[0]
    log = logging.getLogger('urllib3')
    formatter = logging.Formatter(
        '%(asctime)s - %(name)s - %(levelname)s - %(message)s' if args.debug else '%(message)s')
    channel = logging.StreamHandler(sys.stderr)
    log.setLevel(logging.DEBUG if args.debug else logging.ERROR)
    channel.setLevel(logging.DEBUG if args.debug else logging.ERROR)
    channel.setFormatter(formatter)
    log.addHandler(channel)
    http_adapter = HTTPAdapter(max_retries=MAX_RETRIES)
    session = requests.Session()
    session.mount('http://', http_adapter)
    session.mount('https://', http_adapter)
    session.headers.update(**HEADERS)
    if '-' not in phone_number:
        if phone_number[0] == '1' and len(phone_number) == 11:
            phone_number = phone_number[1:]
            log.debug('Removed leading 1')
        parts = [phone_number[i:i + 3] for i in range(0, 10, 3)]
        log.debug('Phone number parts: %s', parts)
        phone_number = '-'.join(parts[0:3]) + parts[3]
        log.debug('Adjusted phone number: %s', phone_number)
    ret = 0
    arg: str
    for arg in args.tracking_number:
        req = session.get(GET_URL, params=dict(qtc_tLabels1=arg))
        req.raise_for_status()
        content = req.content.decode('utf-8')
        if 'could not locate the tracking information' in content:
            log.error('Failed with tracking number %s', arg)
            continue
        data = dict(
            confirmSms='on',
            email1=NAME1_EMPTY_VALUE,
            label=arg,
            name1=NAME1_EMPTY_VALUE,
            smsNumber=phone_number,
            textAlert='on',
            textAll='on',
            textDnd='on',
            textFuture='on',
            textOA='on',
            textPickup='on',
            textToday='on',
        )
        log.debug('POST data: %s', data)
        add_headers = {
            'Referer': f'{GET_URL}?qtc_tLabels1={arg}',
            'X-Requested-With': 'XMLHttpRequest',
        }
        req = session.post(POST_URL, data=data, headers=add_headers)
        req.raise_for_status()
        json: dict[str, Any] = req.json()
        log.debug('Response: %s', json)
        if json.get('textServiceError') != 'false':
            log.error('Failed with tracking number %s', arg)
            ret = 1
    return ret


if __name__ == '__main__':
    sys.exit(main())
