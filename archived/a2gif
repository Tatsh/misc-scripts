#!/usr/bin/env python
# PYTHON_ARGCOMPLETE_OK
from argparse import ArgumentParser
from os import close as close_fd, unlink
from os.path import basename, dirname, join as path_join, realpath, splitext
from tempfile import mkstemp
from typing import Any, Iterable
import subprocess as sp
import sys

import argcomplete


def ffmpeg(args: Iterable[str], **kwargs: Any) -> None:
    sp.run(('ffmpeg',) + tuple(args), check=True, **kwargs)


def main() -> int:
    parser = ArgumentParser(description='Convert any video file to GIF')
    parser.add_argument('-ss', metavar='TIME_START', help='Time start specification')
    parser.add_argument('-to', metavar='TIME_END', help='Time end specification')
    parser.add_argument('-t',
                        metavar='LENGTH_SPEC',
                        help='Length specification or number of seconds')
    parser.add_argument('-w', '--width', type=int, default=640, help='Video width')
    parser.add_argument('-r', '--fps', type=int, default=10, help='Framerate')
    parser.add_argument('-gifflags', help='See `ffmpeg -h encoder=gif`')
    parser.add_argument('-o', '--output', help='Output file')
    parser.add_argument('video_file')
    argcomplete.autocomplete(parser)
    args = parser.parse_args()
    fd, palette_fn = mkstemp(prefix='a2gif-', suffix='.png')
    input_video = realpath(args.video_file)
    if not args.output:
        output_file = path_join(dirname(input_video), f'{splitext(basename(input_video))[0]}.gif')
    else:
        output_file = args.output
    ffmpeg_args: tuple[str, ...] = ('-y',)
    palette_filter = (f'fps={args.fps},scale={args.width}:-1:flags=lanczos,'
                      'palettegen')
    if args.to and args.t:
        print('Cannot use -to and -t arguments at same time', file=sys.stderr)
        return 1
    ffmpeg_args += ('-i', input_video)
    if args.ss:
        ffmpeg_args += ('-ss', args.ss)
    if args.to:
        ffmpeg_args += ('-to', args.to)
    if args.t:
        ffmpeg_args += ('-t', args.t)
    ffmpeg_args += ('-vf', palette_filter, palette_fn)
    ffmpeg(ffmpeg_args)
    video_filter = (f'fps={args.fps},scale={args.width}:-1:flags=lanczos[x];'
                    '[x][1:v]paletteuse')
    ffmpeg_args = ('-y',)
    if args.ss:
        ffmpeg_args += ('-ss', args.ss)
    if args.to:
        ffmpeg_args += ('-to', args.to)
    if args.t:
        ffmpeg_args += ('-t', args.t)
    ffmpeg_args += ('-i', input_video, '-i', palette_fn, '-filter_complex', video_filter)
    if args.gifflags:
        ffmpeg_args += ('-gifflags', args.gifflags)
    ffmpeg(ffmpeg_args + (output_file,))
    close_fd(fd)
    unlink(palette_fn)
    return 0


if __name__ == '__main__':
    sys.exit(main())
