#!/usr/bin/env python
from datetime import datetime
from functools import lru_cache
from os.path import basename, expanduser, join as path_join
from typing import Final, TypedDict
import configparser
import logging
import os
import sqlite3
import sys


class CookieDict(TypedDict):
    expires_utc: int | str
    host_key: str
    name: str
    path: str
    value: str
    secure: int
    httponly: int


@lru_cache()
def setup_logging_stdout(name: str | None = None, verbose: bool = False) -> logging.Logger:
    name = name if name else basename(sys.argv[0])
    log = logging.getLogger(name)
    log.setLevel(logging.DEBUG if verbose else logging.INFO)
    channel = logging.StreamHandler(sys.stdout)
    channel.setFormatter(logging.Formatter('%(message)s'))
    channel.setLevel(logging.DEBUG if verbose else logging.INFO)
    log.addHandler(channel)
    return log


def main() -> int:
    try:
        base_domain = sys.argv[1]
    except IndexError:
        print(f'Usage: {sys.argv[0]} BASEDOMAIN')
        sys.exit(1)
    log = setup_logging_stdout()
    chrome_sqlite_file = expanduser('~/.config/chromium/Default/Cookies')
    mozilla_profiles_file = expanduser('~/.mozilla/firefox/profiles.ini')
    active_profile = None
    config = configparser.ConfigParser()
    config.read(mozilla_profiles_file)
    sections = config.sections()
    i = 0
    is_full_path = False
    for section in sections:
        if section == 'general':
            i += 1
            continue
        if config[section].getboolean('default', fallback=False):
            active_profile = config[section].get('path', fallback=None)
            # Sometimes a full path is given
            is_full_path = os.sep in active_profile
            break
        i += 1
    assert active_profile is not None
    mozilla_db_file = path_join(active_profile, 'cookies.sqlite')
    if not is_full_path:
        mozilla_db_file = path_join(expanduser('~/.mozilla/firefox'), mozilla_db_file)

    conn = sqlite3.connect(mozilla_db_file, detect_types=sqlite3.PARSE_COLNAMES)
    c = conn.cursor()
    sql = ('SELECT name, value, host, path, expiry, isSecure, isHttpOnly FROM '
           'moz_cookies WHERE baseDomain like ?')
    c.execute(sql, (f'%{base_domain}%',))
    cookies: Final[list[CookieDict]] = []
    for row in c:
        cookies.append({
            'name': row[0],
            'value': row[1],
            'host_key': row[2],
            'path': row[3],
            'expires_utc': row[4],  # Unix timestamp in seconds
            'secure': int(row[5]),
            'httponly': int(row[6]),
        })
    conn.close()

    conn = sqlite3.connect(chrome_sqlite_file, detect_types=sqlite3.PARSE_COLNAMES)
    c = conn.cursor()
    i = 0
    creation_utc = int((datetime.utcnow() - datetime(1970, 1, 1)).total_seconds() * (10 ** 7))
    columns = ('creation_utc', 'host_key', 'name', 'value', 'path', 'expires_utc', 'secure',
               'httponly', 'has_expires', 'persistent', 'last_access_utc')
    cols = ','.join(columns)
    question_marks = ('?,' * len(columns))[:-1]
    delete_query = ('DELETE FROM cookies WHERE host_key = ? AND name = ? '
                    'AND path = ?')
    insert_query = (f'INSERT INTO cookies ({cols}) '
                    f'VALUES({question_marks})')
    try:
        for dic in cookies:
            dic['expires_utc'] = int(float(dic['expires_utc'])) * (10 ** 7)
            has_expires = persistent = 1
            if dic['expires_utc'] == 0:
                has_expires = 0
                persistent = 0
            c.execute(delete_query, (
                dic['host_key'],
                dic['name'],
                dic['path'],
            ))
            c.execute(insert_query, (creation_utc + i, dic['host_key'], dic['name'], dic['value'],
                                     dic['path'], dic['expires_utc'], dic['secure'],
                                     dic['httponly'], has_expires, persistent, creation_utc))
            i += 1
        conn.commit()
    finally:
        conn.close()
    log.info('Imported %d cookies', len(cookies))

    return 0


if __name__ == '__main__':
    sys.exit(main())
