#!/usr/bin/env python
# PYTHON_ARGCOMPLETE_OK
from functools import lru_cache
from os import stat, unlink, utime
from os.path import basename, isdir, isfile, join as path_join, realpath, splitext
import argparse
import logging
import sys

import argcomplete


@lru_cache()
def setup_logging_stdout(name: str | None = None, verbose: bool = False) -> logging.Logger:
    name = name if name else basename(sys.argv[0])
    log = logging.getLogger(name)
    log.setLevel(logging.DEBUG if verbose else logging.INFO)
    channel = logging.StreamHandler(sys.stdout)
    channel.setFormatter(logging.Formatter('%(message)s'))
    channel.setLevel(logging.DEBUG if verbose else logging.INFO)
    log.addHandler(channel)
    return log


def safe_rename(fn: str, target: str, preserve: bool) -> bool:
    log = setup_logging_stdout()
    if not isfile(target) and not isdir(target):
        log.info('copy %s -> %s', fn, target)
        with open(target, 'wb+') as f:
            with open(fn, 'rb') as of:
                f.write(of.read())
            if preserve:
                s = stat(fn)
                utime(target, (
                    s.st_atime,
                    s.st_mtime,
                ))
        return True
    if isdir(target):
        target = path_join(target, basename(fn))
        return safe_rename(fn, target, preserve)
    renamed = False
    n = 1
    while not renamed:
        bfn, ext = splitext(target)
        while isfile(target):
            suffix = f'-{n:d}'
            last = ext if ext else ''
            target = f'{bfn}{suffix}{last}'
            n += 1
        renamed = safe_rename(fn, target, preserve)
        n += 1
    return renamed


def main() -> int:
    log = setup_logging_stdout()
    is_mv = sys.argv[0].endswith('safemv')
    help_ = 'Copy files without clobbering existing files'
    if is_mv:
        help_ = f'Move {help_[5:]}'
    parser = argparse.ArgumentParser(help_)
    parser.add_argument('-t',
                        '--target-dir',
                        metavar='TARGET_DIR',
                        help='Target directory (for use with xargs)')
    parser.add_argument('--no-preserve', action='store_true')
    parser.add_argument('files', nargs='*')
    argcomplete.autocomplete(parser)
    args = parser.parse_args()
    target: str | None = args.target_dir
    if target:
        target = realpath(target)
        if not isdir(target):
            log.error('TARGET_DIR argument must be a directory, given: %s', target)
            return 1
    else:
        if len(args.files) < 2:
            log.error('Must have file to move and target argument')
            return 1
        should_be_dir_last = len(args.files) > 2
        target = realpath(args.files.pop())
        assert target is not None
        if should_be_dir_last and not isdir(target):
            log.error('Last argument must be a directory if specifying more than '
                      '2 files to move')
            return 1
    args.files = [realpath(x) for x in args.files]
    fn: str
    for fn in args.files:
        if not safe_rename(fn, target, not args.no_preserve):
            raise RuntimeError('Unexpected error')
    if is_mv:
        for fn in args.files:
            unlink(fn)
    return 0


if __name__ == '__main__':
    sys.exit(main())
