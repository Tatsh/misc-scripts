#!/usr/bin/env python
"""
This script emulates "unique application" functionality on Linux. When starting
playback with this script, it will try to reuse an already running instance of
mpv (but only if that was started with umpv). Other mpv instances (not started
by umpv) are ignored, and the script doesn't know about them.

This only takes filenames as arguments. Custom options can't be used; the
script interprets them as filenames. If mpv is already running, the files
passed to umpv are appended to mpv's internal playlist. If a file does not
exist or is otherwise not playable, mpv will skip the playlist entry when
attempting to play it (from the GUI perspective, it's silently ignored).

If mpv isn't running yet, this script will start mpv and let it control the
current terminal. It will not write output to stdout/stderr, because this
will typically just fill ~/.xsession-errors with garbage.

mpv will terminate if there are no more files to play, and running the umpv
script after that will start a new mpv instance.

Note that you can control the mpv instance by writing to the command fifo:

    echo "cycle fullscreen" > ~/.umpv_fifo

Note: you can supply custom mpv path and options with the MPV environment
      variable. The environment variable will be split on whitespace, and the
      first item is used as path to mpv binary and the rest is passed as
      options _if_ the script starts mpv. If mpv is not started by the
      script (i.e. mpv is already running), this will be ignored.
"""
from functools import lru_cache
from logging.handlers import SysLogHandler
from os.path import basename, expanduser, realpath
from shlex import split
import errno
import logging
import os
import socket
import string
import subprocess
import sys

import psutil

SOCK = expanduser('~/.cache/umpv-socket')


@lru_cache()
def setup_syslog(name: str | None = None, verbose: bool = False) -> logging.Logger:
    name = name if name else basename(sys.argv[0])
    log = logging.getLogger(name)
    log.setLevel(logging.DEBUG if verbose else logging.INFO)
    channel = SysLogHandler(address='/dev/log')
    channel.setFormatter(logging.Formatter('umpv: %(message)s'))
    channel.setLevel(logging.DEBUG if verbose else logging.INFO)
    log.addHandler(channel)
    return log


def is_url(filename: str) -> bool:
    """This is the same method mpv uses to decide this."""
    parts = filename.split('://', 1)
    if len(parts) < 2:
        return False
    # protocol prefix has no special characters => it's a URL
    return all(x in f'{string.ascii_letters}{string.digits}_' for x in parts[0])


def make_abs(filename: str) -> str:
    """Make them filename absolute. Also makes filename safe against interpretation as options."""
    return filename if is_url(filename) else realpath(filename)


def main() -> int:
    verbose = os.environ.get('UMPV_VERBOSE') is not None
    log = setup_syslog(verbose=verbose)
    files = (make_abs(f) for f in sys.argv[1:])
    sock = None
    try:
        sock = socket.socket(socket.AF_UNIX)
        sock.connect(SOCK)
    except socket.error as e:
        if e.errno == errno.ECONNREFUSED:
            log.debug('Socket refused connection')
            sock = None  # abandoned socket
        elif e.errno == errno.ENOENT:
            log.debug('Socket does not exist')
            sock = None  # does not exist
        else:
            log.error('Socket errno: %d', e.errno, exc_info=True)
            raise e
    opts = split(os.getenv('MPV') or 'mpv')
    mpv_bin = opts[0]
    mpv_running = len([x for x in psutil.process_iter(['pid', 'name']) if x.name() == mpv_bin]) > 0
    if sock and mpv_running:
        # Unhandled race condition: what if mpv is terminating right now?
        for f in files:
            # escape: \ \n "
            # pylint: disable=invalid-string-quote
            f = f.replace("\\", "\\\\").replace("\"", "\\\"").replace("\n", "\\n")
            # pylint: enable=invalid-string-quote
            sock.send(f'raw loadfile "{f}"\n'.encode())
            log.info('Loading file "%s"', f)  # pylint: disable=logging-too-many-args
    else:
        log.info('Starting new mpv instance')
        # Let mpv recreate socket if it does not already exist.
        opts.extend((() if verbose else ('--no-terminal',)) +
                    ('--force-window', f'--input-ipc-server={SOCK}', '--'))
        opts.extend(files)
        subprocess.run(opts, check=True)
    return 0


if __name__ == '__main__':
    sys.exit(main())
