#!/usr/bin/env python
# PYTHON_ARGCOMPLETE_OK
from functools import lru_cache
from os.path import basename
from typing import Final, Iterator, Sequence, cast
import argparse
import logging
import platform
import plistlib
import re
import subprocess as sp
import sys

import argcomplete

KEY_ORIGIN_URL: Final[str] = 'user.xdg.origin.url'
KEY_WHEREFROMS: Final[str] = 'com.apple.metadata:kMDItemWhereFroms'


@lru_cache()
def setup_logging_stdout(name: str | None = None, verbose: bool = False) -> logging.Logger:
    name = name if name else basename(sys.argv[0])
    log = logging.getLogger(name)
    log.setLevel(logging.DEBUG if verbose else logging.INFO)
    channel = logging.StreamHandler(sys.stdout)
    channel.setFormatter(logging.Formatter('%(message)s'))
    channel.setLevel(logging.DEBUG if verbose else logging.INFO)
    log.addHandler(channel)
    return log


def hexstr2bytes(s: str) -> bytes:
    def chunks(seq: str, n: int) -> Iterator[str]:
        for i in range(0, len(seq), n):
            yield seq[i:i + n]

    def hexstr2bytes_generator(s: str) -> Iterator[int]:
        for hex_num in chunks(s, 2):
            yield int(hex_num, 16)

    return bytes(hexstr2bytes_generator(s))


def xattr_mac(key: str, filename: str) -> str:
    return re.sub(
        r'\s+', '',
        sp.run(('xattr', '-p', key, filename), text=True, stdout=sp.PIPE, check=True).stdout)


def xattr_linux(key: str, filename: str) -> str | None:
    return (sp.run(('getfattr', '-n', key, '--only-values', filename),
                   text=True,
                   check=True,
                   stderr=sp.DEVNULL,
                   stdout=sp.PIPE).stdout.strip() or None)


class Namespace(argparse.Namespace):
    files: Sequence[str]
    webpage: bool


def main() -> int:
    parser = argparse.ArgumentParser(description='Determine where downloaded files came from.')
    parser.add_argument('files', metavar='FILE', nargs='+', help='Files to process.')
    parser.add_argument('-w', '--webpage', action='store_true', help='Print the webpage URL')
    argcomplete.autocomplete(parser)
    args = cast(Namespace, parser.parse_args())
    has_multiple = len(args.files) > 1
    index = 1 if args.webpage else 0
    ret = 0
    for arg in args.files:
        try:
            if platform.uname().system == 'Linux':
                val = xattr_linux(KEY_ORIGIN_URL, arg)
            else:
                val = cast(Sequence[str],
                           plistlib.loads(hexstr2bytes(xattr_mac(KEY_WHEREFROMS, arg))))[index]
            if has_multiple:
                sys.stdout.write(f'{arg}: ')
            sys.stdout.write(f'{val}\n')
        except Exception:  # pylint: disable=broad-except
            ret = 1
    return ret


if __name__ == '__main__':
    sys.exit(main())
