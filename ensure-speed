#!/usr/bin/env python
# PYTHON_ARGCOMPLETE_OK
from datetime import datetime
from logging.handlers import SysLogHandler
from os.path import realpath
from typing import Any, Final, NoReturn, TextIO, cast
import argparse
import logging
import signal
import subprocess as sp
import sys

import argcomplete
import yaml

LOG_FORMATTER: Final[logging.Formatter] = logging.Formatter('%(message)s')
log_handle: TextIO | None = None
syslog_handle: SysLogHandler | None = None


def speedtest(*args: str, **kwargs: Any) -> sp.CompletedProcess[str]:
    kwargs.pop('check')
    kwargs.pop('stdout')
    kwargs.pop('encoding')
    kwargs['check'] = True
    kwargs['stdout'] = sp.PIPE
    kwargs['encoding'] = 'utf-8'
    return sp.run(('speedtest',) + args, check=True, stdout=sp.PIPE, text=True, **kwargs)


def ctrl_c(signum: int, frame: Any) -> NoReturn:
    raise SystemExit('Signal raised')


def maybe_log_yaml(handle: TextIO | None, **kwargs: Any) -> None:
    if handle:
        kwargs['time'] = str(datetime.today())
        assert yaml is not None
        handle.write(yaml.safe_dump([kwargs], default_flow_style=False, allow_unicode=True))


def get_line_value(s: str) -> str:
    return s.split(':')[1].strip().split(' ')[0].strip()


class Args(argparse.Namespace):
    download_threshold: float
    upload_threshold: float
    ping_threshold: float
    syslog: bool
    log_file: str | None
    verbose: bool


def main() -> int:
    signal.signal(signal.SIGINT, ctrl_c)
    logger = logging.getLogger('speedtest')
    logger.setLevel(logging.INFO)
    parser = argparse.ArgumentParser()
    parser.add_argument('-d', '--download-threshold', default=50, type=float)
    parser.add_argument('-u', '--upload-threshold', default=5, type=float)
    parser.add_argument('-p', '--ping-threshold', default=30, type=float)
    parser.add_argument('-s', '--syslog', action='store_true')
    parser.add_argument('-l', '--log-file', help='Debug log')
    parser.add_argument('-v', '--verbose', action='store_true')
    argcomplete.autocomplete(parser)
    args = cast(Args, parser.parse_args())
    ping = dl = ul = share = None
    log_yaml_handle: TextIO | None = None
    failed = False
    if args.log_file:
        args.log_file = realpath(args.log_file)
        log_fh = open(args.log_file, 'a+')  # pylint: disable=consider-using-with
        assert log_fh is not None
        log_yaml_handle = open(args.log_file + '.yml', 'a+')  # pylint: disable=consider-using-with
        channel = logging.StreamHandler(log_fh)
        channel.setFormatter(LOG_FORMATTER)
        channel.setLevel(logging.DEBUG)
        logger.addHandler(channel)
    if args.syslog:
        syslog_h = SysLogHandler(address='/dev/log')
        assert syslog_h is not None
        syslog_h.setFormatter(LOG_FORMATTER)
        syslog_h.setLevel(logging.INFO)
        logger.addHandler(syslog_h)
    if args.verbose:
        channel = logging.StreamHandler(sys.stdout)  # type: ignore[arg-type]
        channel.setFormatter(LOG_FORMATTER)
        channel.setLevel(logging.INFO)
        logger.addHandler(channel)
    logger.info('Running `speedtest --share --simple`')
    try:
        for line in speedtest('--share', '--simple').stdout.splitlines():
            if line.startswith('Ping: '):
                ping = float(get_line_value(line))
            elif line.startswith('Download: '):
                dl = float(get_line_value(line))
            elif line.startswith('Upload: '):
                ul = float(get_line_value(line))
            elif line.startswith('Share results: '):
                share = ':'.join(line.split(':')[1:]).strip()
    except sp.CalledProcessError as e:
        logger.error('speedtest failed to run')
        if e.stderr:
            logger.exception(e)
        return 1
    assert ping is not None
    if ping > args.ping_threshold:
        logger.error('Ping threshold higher than threshold. Got %0.03f, '
                     'wanted at most %.03f.', ping, args.ping_threshold)
        failed = True
    assert dl is not None
    if dl < args.download_threshold:
        logger.error(
            'Download speed threshold lower than threshold. '
            'Got %.03f, wanted at least %0.03f.', dl, args.download_threshold)
        failed = True
    assert ul is not None
    if ul < args.upload_threshold:
        logger.error(
            'Upload speed threshold lower than threshold. '
            'Got %.03f, wanted at least %0.03f.', ul, args.upload_threshold)
        failed = True
    logger.info('Ping: %0.03f ms', ping)
    logger.info('Download speed: %0.02f Mb/s', dl)
    logger.info('Upload speed: %0.02f Mb/s', ul)
    logger.info('Share URI: %s', share)
    maybe_log_yaml(log_yaml_handle, ping=ping, download=dl, upload=ul, share_uri=share)
    if True in (not x for x in (ping, dl, ul, share)):
        logger.error('Output not as expected (other error)')
        return 1
    if failed:
        logger.error('Exiting with status 1')
        return 1
    return 0


if __name__ == '__main__':
    sys.exit(main())
