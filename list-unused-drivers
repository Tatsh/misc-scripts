#!/usr/bin/env python
from typing import Final, Sequence
import argparse
import os
import subprocess as sp
import sys

MODULES_RECOMMENDED_TO_KEEP: Final[tuple[str, ...]] = (
    'ahci',
    'snd-usb-audio',
    'usb-storage',
    'usbfs',
)


def main() -> None:
    if os.geteuid() == 0:
        print('It is actually preferable to run this as non-root user', file=sys.stderr)
    parser: Final[argparse.ArgumentParser] = argparse.ArgumentParser()
    parser.add_argument('-i', '--ignore-modules', nargs='*')
    parser.add_argument('--no-recommended', action='store_true')
    args: Final[argparse.Namespace] = parser.parse_args()
    recommended = (MODULES_RECOMMENDED_TO_KEEP if not args.no_recommended else [])
    ignored_modules: list[str] | None = args.ignore_modules
    all_ignored_modules: Final[Sequence[str]] = ((ignored_modules + list(recommended))
                                                 if ignored_modules else recommended)
    items_dict: dict[str, list[str]] = {}
    with sp.Popen(('hwinfo',), stdout=sp.PIPE, text=True) as proc:
        enabled = False
        while not proc.poll():
            if proc.stdout and (line := proc.stdout.readline().strip()):
                if 'sysfs driver list end' in line:
                    break
                if 'sysfs driver list' in line:
                    enabled = True
                    continue
                if enabled:
                    k, value = [x.strip() for x in line.split(': ', 2)]
                    try:
                        items_dict[k].append(value)
                    except KeyError:
                        items_dict[k] = [value]
    for item in sorted(
            k for k, value in items_dict.items()
            if len(value) == 1 and 'module =' in value[0] and k not in all_ignored_modules):
        print(item)


if __name__ == '__main__':
    main()
