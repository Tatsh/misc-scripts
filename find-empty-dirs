#!/usr/bin/env python
from asyncio import subprocess as sp
from asyncio.events import AbstractEventLoop
from os import environ, listdir
from typing import AsyncIterator
import asyncio
import re
import sys

IGNORED_FILES = set(('.DS_Store', '.DS_Store?', '.Spotlight-V100', '.Trashes', '.directory',
                     '.localized', 'Thumbs.db', 'ehthumbs.db'))
IGNORE_RE = re.compile(r'(?:/\.(?:[Tt]rash|git|npm/_git-remotes))/?')


def env_no_case(key: str) -> str:
    for x in environ:
        if key == x or key.lower() == x.lower():
            return environ[x]
    raise KeyError(key)


def ignore_dir(name: bytes) -> tuple[str, bool]:
    path = name.decode().strip()
    if not path:
        return path, True
    try:
        contents = listdir(path)
    except PermissionError:
        return path, True
    return path, bool(re.search(IGNORE_RE, path)) or len(set(contents) - IGNORED_FILES) != 0


async def iter_lines(
        loop: AbstractEventLoop,
        proc: sp.Process  # pylint: disable=no-member
) -> AsyncIterator[str]:
    assert proc.stdout
    while line := await proc.stdout.readline():
        path, ignore = await loop.run_in_executor(None, ignore_dir, line)
        if not ignore:
            yield path


async def a_main(loop: AbstractEventLoop) -> None:
    async for path in iter_lines(
            loop,
            await sp.create_subprocess_exec(  # pylint: disable=no-member
                'find',
                await loop.run_in_executor(None, env_no_case, 'home'),
                '-xdev',
                '-type',
                'd',
                stdout=sp.PIPE,
                stderr=sp.PIPE)):
        await loop.run_in_executor(None, print, path)


def main() -> int:
    loop = asyncio.get_event_loop()
    loop.run_until_complete(a_main(loop))
    return 0


if __name__ == '__main__':
    sys.exit(main())
