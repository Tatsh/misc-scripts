[tool.poetry]
name = "tatsh-misc-scripts"
version = "0.0.1"
authors = ["Andrew Udvare <audvare@gmail.com>"]
classifiers = [
  "Development Status :: 2 - Pre-Alpha",
  "Intended Audience :: Developers",
  "License :: OSI Approved :: MIT License",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3.12",
  "Typing :: Typed",
]
description = "Miscellaneous scripts and libraries not yet in their own package."
keywords = ["command line", "miscellaneous", "scripts"]
license = "MIT"
packages = [{ include = "tatsh_misc_utils" }]
readme = "README.md"
repository = "https://github.com/Tatsh/misc-scripts"

[tool.poetry.dependencies]
python = "^3.12"
beautifulsoup4 = "^4.12.3"
click = "^8.1.7"
defusedxml = "^0.7.1"
mysqlclient = "^2.2.6"
pretty-bad-protocol = "^3.1.1"
psutil = "^6.1.0"
pydbus = "^0.6.0"
python-gnupg = "^0.5.3"
python-magic = "^0.4.27"
pyxdg = "^0.28"
pyyaml = "^6.0.2"
requests = "^2.32.3"
yt-dlp = "^2024.11.18"

[tool.poetry.group.dev]
optional = true

[tool.poetry.group.dev.dependencies]
cffconvert = "^2.0.0"
mypy = "^1.13.0"
ruff = "^0.8.2"
types-beautifulsoup4 = "^4.12.0.20241020"
types-mysqlclient = "^2.2.0.20240911"
types-psutil = "^6.1.0.20241102"
types-pyyaml = "^6.0.12.20240917"
types-requests = "^2.32.0.20241016"
yapf = "^0.43.0"
yt-dlp-types = "~0.0.13"

[tool.poetry.group.docs]
optional = true

[tool.poetry.group.docs.dependencies]
doc8 = "^1.1.1"
docutils = "^0.21.2"
esbonio = "^0.16.5"
restructuredtext-lint = "^1.4.0"
sphinx = "^8.1.3"
sphinx-click = "^6.0.0"
tomlkit = "^0.13.2"

[tool.poetry.group.tests]
optional = true

[tool.poetry.group.tests.dependencies]
coveralls = "^3.3.1"
mock = "^5.1.0"
pytest = "^8.3.4"
pytest-cov = "^4.1.0"
pytest-mock = "^3.12.0"
requests-mock = "^1.11.0"

[tool.poetry.scripts]
add-cdda-times = "tatsh_misc_utils.commands:add_cdda_times_main"
adp = "tatsh_misc_utils.commands:adp_main"
is-ascii = "tatsh_misc_utils.commands:is_ascii_main"
netloc = "tatsh_misc_utils.commands:urldecode_main"
underscorize = "tatsh_misc_utils.commands:underscorize_main"
urldecode = "tatsh_misc_utils.commands:urldecode_main"
wait-for-disc = "tatsh_misc_utils.commands:wait_for_disc_main"
where-from = "tatsh_misc_utils.commands:where_from_main"

[tool.coverage.report]
omit = ["conftest.py", "tests.py", "tests/test_*.py"]
show_missing = true

[tool.coverage.run]
branch = true
omit = ["conftest.py", "tests.py", "tests/test_*.py"]

[tool.doc8]
max-line-length = 100

[tool.mypy]
cache_dir = "~/.cache/mypy"
explicit_package_bases = true
platform = "linux"
python_version = "3.12"
show_column_numbers = true
strict = true
strict_optional = true
warn_unreachable = true

[tool.pytest.ini_options]
DJANGO_SETTINGS_MODULE = "config.env.pytest"
django_find_project = false
mock_use_standalone_module = true
norecursedirs = ["node_modules"]
python_files = ["tests.py", "test_*.py", "*_tests.py"]
testspaths = ["tests"]

[tool.pyright]
deprecateTypingAliases = true
enableExperimentalFeatures = true
pythonPlatform = "Linux"
pythonVersion = "3.12"
reportCallInDefaultInitializer = "warning"
reportImplicitOverride = "warning"
reportImportCycles = "error"
reportMissingModuleSource = "error"
reportPropertyTypeMismatch = "error"
reportShadowedImports = "error"
reportUninitializedInstanceVariable = "error"
reportUnnecessaryTypeIgnoreComment = "error"
typeCheckingMode = "off"
useLibraryCodeForTypes = false

[tool.ruff]
cache-dir = "~/.cache/ruff"
extend-exclude = []
force-exclude = true
line-length = 100
namespace-packages = ["docs", "tests"]
target-version = "py312"
unsafe-fixes = true

[tool.ruff.lint]
extend-select = [
  "A",
  "AIR",
  "ANN",
  "ARG",
  "ASYNC",
  "B",
  "BLE",
  "C4",
  "C90",
  "COM",
  "CPY",
  "D",
  "DJ",
  "DTZ",
  "E",
  "EM",
  "ERA",
  "EXE",
  "F",
  "FA",
  "FBT",
  "FIX",
  "FLY",
  "FURB",
  "G",
  "I",
  "ICN",
  "INP",
  "INT",
  "ISC",
  "LOG",
  "N",
  "NPY",
  "PD",
  "PERF",
  "PGH",
  "PIE",
  "PL",
  "PT",
  "PTH",
  "PYI",
  "Q",
  "RET",
  "RSE",
  "RUF",
  "S",
  "SIM",
  "SLF",
  "SLOT",
  "T10",
  "T20",
  "TCH",
  "TD",
  "TID",
  "TRY",
  "UP",
  "YTT",
]
ignore = [
  "A005",
  "ANN401",
  "ARG001",
  "ARG002",
  "ARG004",
  "C901",
  "COM812",
  "CPY001",
  "D100",
  "D101",
  "D102",
  "D103",
  "D104",
  "D105",
  "D106",
  "D107",
  "D203",
  "D204",
  "D212",
  "EM101",
  "N818",
  "PLR0912",
  "PLR0913",
  "PLR0914",
  "PLR0915",
  "PLR0917",
  "PLR1702",
  "PLR6301",
  "S101",
  "S404",
  "S603",
  "T201", # temporary
  "TD002",
  "TD003",
  "TD004",
]
preview = true

[tool.ruff.lint.flake8-quotes]
inline-quotes = "single"
multiline-quotes = "double"

[tool.ruff.lint.isort]
case-sensitive = true
combine-as-imports = true
from-first = true

[tool.ruff.lint.pep8-naming]
extend-ignore-names = ["test_*"]

[tool.ruff.lint.pydocstyle]
convention = "numpy"

[tool.yapf]
align_closing_bracket_with_visual_indent = true
allow_multiline_dictionary_keys = false
allow_multiline_lambdas = false
allow_split_before_dict_value = true
blank_line_before_class_docstring = false
blank_line_before_module_docstring = false
blank_line_before_nested_class_or_def = false
blank_lines_around_top_level_definition = 2
coalesce_brackets = true
column_limit = 100
continuation_align_style = "SPACE"
continuation_indent_width = 4
dedent_closing_brackets = false
disable_ending_comma_heuristic = false
each_dict_entry_on_separate_line = true
indent_dictionary_value = true
indent_width = 4
join_multiple_lines = true
no_spaces_around_selected_binary_operators = false
space_between_ending_comma_and_closing_bracket = false
spaces_around_default_or_named_assign = false
spaces_around_power_operator = true
spaces_before_comment = 2
split_all_comma_separated_values = false
split_arguments_when_comma_terminated = false
split_before_bitwise_operator = true
split_before_closing_bracket = true
split_before_dict_set_generator = true
split_before_dot = false
split_before_expression_after_opening_paren = false
split_before_first_argument = false
split_before_logical_operator = true
split_before_named_assigns = true
split_complex_comprehension = false
split_penalty_after_opening_bracket = 30
split_penalty_after_unary_operator = 10000
split_penalty_before_if_expr = 0
split_penalty_bitwise_operator = 300
split_penalty_comprehension = 80
split_penalty_excess_character = 7000
split_penalty_for_added_line_split = 30
split_penalty_import_names = 0
split_penalty_logical_operator = 300
use_tabs = false

[tool.yapfignore]
ignore_patterns = ["node_modules/**"]
[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"