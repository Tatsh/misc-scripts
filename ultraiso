#!/usr/bin/env python
# Provides easy Linux-friendly command line access to UltraISO.
# Based on http://www.ezbsystems.com/ultraiso/cmdline.htm
# UltraISO must be installed with Wine in the default directory.
from functools import lru_cache
from os.path import basename, expanduser, join as path_join, realpath
from shlex import quote
from typing import Any, AnyStr, Sequence, cast
import argparse
import logging
import os
import subprocess as sp
import sys


@lru_cache()
def setup_logging_stdout(name: str | None = None, verbose: bool = False) -> logging.Logger:
    name = name if name else basename(sys.argv[0])
    log = logging.getLogger(name)
    log.setLevel(logging.DEBUG if verbose else logging.INFO)
    channel = logging.StreamHandler(sys.stdout)
    channel.setFormatter(logging.Formatter('%(asctime)s - %(message)s'))
    channel.setLevel(logging.DEBUG if verbose else logging.INFO)
    log.addHandler(channel)
    return log


def get_ultraiso_path(prefix: str) -> str | None:
    name_of_exe = 'UltraISO.exe'
    paths = (path_join(prefix, 'drive_c', f'Program Files{x}', 'UltraISO', name_of_exe)
             for x in ('', ' (x86)'))
    actual_exe_path = None
    for exe in paths:
        try:
            with open(exe):
                actual_exe_path = exe
                break
        except IOError:
            pass
    return actual_exe_path


def adjust_unix_path_to_wine(path: str) -> str:
    rest = realpath(path).replace('/', '\\')
    return f'Z:{rest}'


class ExistantFile(argparse.Action):
    def __call__(self,
                 _parser: argparse.ArgumentParser,
                 namespace: argparse.Namespace,
                 values: str | Sequence[Any] | None,
                 _option_string: str | None = None) -> None:
        with open(cast(str, values), 'rb'):
            setattr(namespace, self.dest, adjust_unix_path_to_wine(cast(str, values)))


def isfile(f: AnyStr | int) -> bool:
    try:
        with open(f, 'rb'):
            return True
    except IOError:
        pass
    return False


def main() -> int:
    log = setup_logging_stdout(verbose=True)
    default_wine_prefix = expanduser('~/.local/share/wineprefixes/ultraiso')
    parser = argparse.ArgumentParser(description='UltraISO command line access.')
    argv_len = len(sys.argv)

    if argv_len == 1 or (argv_len == 2 and isfile(sys.argv[1])):
        actual_exe_path = get_ultraiso_path(default_wine_prefix)
        assert actual_exe_path is not None
        assumed_xauthority = expanduser('~/.Xauthority')
        # pylint: disable=subprocess-run-check
        sp.run(['wine', actual_exe_path] + sys.argv[1:],
               env=dict(WINEPREFIX=default_wine_prefix,
                        DISPLAY=os.environ.get('DISPLAY', ''),
                        XAUTHORITY=os.environ.get('XAUTHORITY', assumed_xauthority)))
        return 0

    parser.add_argument('-prefix',
                        metavar='path',
                        help='Wine prefix',
                        default=default_wine_prefix,
                        dest='prefix')

    info_group = parser.add_argument_group()
    info_group.add_argument('-volume', help='Volume label', dest='volume')
    info_group.add_argument('-sysid', help='System ID', dest='sysid')
    info_group.add_argument('-appid', help='Application ID', dest='appid')
    info_group.add_argument('-volset', help='Volume set ID', dest='volset', type=int)
    info_group.add_argument('-preparer', help='Preparer', dest='preparer')
    info_group.add_argument('-publisher', help='Publisher', dest='publisher')

    settings_group = parser.add_argument_group()
    settings_group.add_argument('-ilong',
                                action='store_true',
                                dest='ilong',
                                help='Long filename for ISO 9660 volume, up to'
                                ' 31 chars')
    settings_group.add_argument('-imax',
                                help='Max filename for ISO 9660 volume, up to'
                                ' 207 chars',
                                dest='ilong',
                                action='store_true')
    settings_group.add_argument('-vernum',
                                help='Include file version number',
                                dest='vernum',
                                action='store_true')
    settings_group.add_argument('-lowercase',
                                help='Allow lowercase letter',
                                dest='lowercase',
                                action='store_true')

    fs_group = parser.add_argument_group()
    fs_group.add_argument('-joliet',
                          help='Create Joliet volume',
                          action='store_true',
                          dest='joliet')
    fs_group.add_argument('-jlong',
                          action='store_true',
                          dest='jlong',
                          help='Long filename for joliet volume, up to 103 '
                          'chars')
    fs_group.add_argument('-rockridge',
                          help='Create RockRidge volume',
                          action='store_true',
                          dest='rockridge')
    fs_group.add_argument('-udf', help='Create UDF volume', action='store_true', dest='udf')
    fs_group.add_argument('-hfs', help='Create Apple HFS volume', action='store_true', dest='hfs')
    fs_group.add_argument('-udfdvd',
                          action='store_true',
                          dest='udfdvd',
                          help='Create UDF DVD image (this option will '
                          'overwrite all other volume settings)')

    boot_group = parser.add_argument_group()
    boot_group.add_argument('-bootfile', help='Set boot file', action=ExistantFile, dest='bootfile')
    boot_group.add_argument('-bootinfotable',
                            action='store_true',
                            help='Generate boot information table in boot file')
    boot_group.add_argument('--optimise',
                            help='Optimise file systems by coding same files only'
                            ' once')

    add_file_or_dir_group = parser.add_argument_group()
    add_file_or_dir_group.add_argument('--file',
                                       dest='file',
                                       metavar='filename',
                                       action=ExistantFile,
                                       help='Add one file or folder (include folder name and '
                                       'all files and folders under it)')
    add_file_or_dir_group.add_argument('--directory',
                                       dest='directory',
                                       metavar='directory',
                                       help='Add all files and folders under given directory'
                                       ' (not include directory name itself)')

    dir_group = parser.add_argument_group()
    dir_group.add_argument('-newdir',
                           metavar='dirname',
                           dest='newdir',
                           help='Create a new directory')
    dir_group.add_argument('-chdir',
                           metavar='dirname',
                           dest='chdir',
                           help='Change current directory in ISO image')
    dir_group.add_argument('-rmdir',
                           metavar='filename',
                           dest='rmdir',
                           help='Remove a file or folder from ISO image (full '
                           'path should be specified)')

    hide_group = parser.add_argument_group()
    hide_group.add_argument('-pn',
                            metavar='filename',
                            type=int,
                            choices=range(1, 10),
                            help='n=1-9, set priority of a file or folder'
                            ' (full path should be specified)')
    hide_group.add_argument('-hide',
                            metavar='filename',
                            dest='hide',
                            help='Set hidden attribute of a file or folder'
                            ' (full path should be specified)')
    hide_group.add_argument('-ahide',
                            metavar='filename',
                            dest='ahide',
                            help='Set advanced hidden attribute of a file or'
                            ' folder (full path should be specified)')

    batch_group = parser.add_mutually_exclusive_group()
    batch_group.add_argument('-bin2iso',
                             metavar='filename',
                             dest='output',
                             help='Convert input BIN/CUE image to ISO format')
    batch_group.add_argument('-dmg2iso',
                             metavar='filename',
                             dest='output',
                             help='Convert input DMG (non-compressed) image to'
                             ' ISO format')

    ultraiso_only = parser.add_argument_group()
    ultraiso_only.add_argument('-bin2isz',
                               metavar='filename',
                               dest='output',
                               help='Convert input CD/DVD image to ISZ format'
                               ' (UltraISO only)')
    ultraiso_only.add_argument('-compress',
                               metavar='N',
                               type=int,
                               choices=range(1, 17),
                               help='Set compression level, n = 1-16')
    ultraiso_only.add_argument('-encrypt',
                               metavar='X',
                               type=int,
                               choices=range(1, 4),
                               help='Set encryption method, x = 1-3')
    ultraiso_only.add_argument('-password', metavar='PASSWORD', help='Set password')
    ultraiso_only.add_argument('-split',
                               metavar='SPLIT_SIZE',
                               type=int,
                               help='Set segment size in bytes')

    info_only = parser.add_mutually_exclusive_group()
    info_only.add_argument('-list', help='Create a list of files and directores in an'
                           ' ISO image')
    info_only.add_argument('-get', help='Set a file or directory (full path) to be'
                           ' extracted')
    info_only.add_argument('-extract',
                           nargs=1,
                           metavar='DIRECTORY_PATH',
                           help='Extract ISO image to specified directory')

    copy_op = parser.add_argument_group()
    copy_op.add_argument('-copy',
                         metavar='DRIVE',
                         help='Make ISO image from a CD/DVD drive'
                         ' (use Windows drive letters)')

    verification = parser.add_argument_group()
    verification.add_argument('--checksum',
                              metavar='IMAGE_FILE',
                              action=ExistantFile,
                              help='Create file checksum of an ISO image')
    verification.add_argument('--md5',
                              metavar='IMAGE_FILE',
                              action=ExistantFile,
                              help='Generate MD5 hash of an ISO image')
    verification.add_argument('--crc32',
                              metavar='IMAGE_FILE',
                              action=ExistantFile,
                              help='Generate CRC-32 checksum of an ISO image')
    verification.add_argument('--crc16',
                              metavar='IMAGE_FILE',
                              action=ExistantFile,
                              help='Generate CRC-16/CRC-CCITT checksum of an'
                              ' ISO image')
    verification.add_argument('-veryfy',
                              metavar='filename.iso.md5',
                              action=ExistantFile,
                              help='Verify file checksums of an ISO image')
    verification.add_argument('-veryfymd5',
                              metavar='filename.iso.md5',
                              action=ExistantFile,
                              help='Verify MD5 checksum of an ISO image')

    only_single_file = parser.add_argument_group()
    only_single_file.add_argument('-cmd',
                                  metavar='FILENAME',
                                  action=ExistantFile,
                                  help='Read all command line options from a'
                                  ' text file')

    parser.add_argument('-input',
                        metavar='filename',
                        dest='input',
                        action=ExistantFile,
                        help='Input ISO image')
    parser.add_argument('-output', metavar='filename', dest='output', help='Output ISO image')

    args = parser.parse_args()
    actual_exe_path = get_ultraiso_path(args.prefix)
    env = {'WINEPREFIX': args.prefix, 'HOME': os.environ['HOME']}
    need_two_dashes = ('checksum', 'md5', 'crc32', 'crc16')

    if actual_exe_path is None:
        log.error('UltraISO.exe not found')
        return 1

    if 'DISPLAY' not in os.environ:
        log.warning('This may not work without DISPLAY being set')
    else:
        env['DISPLAY'] = os.environ['DISPLAY']

    sp_args = ['wine', actual_exe_path]
    full_argv = ' '.join(sys.argv)

    for arg in vars(args):
        if arg not in full_argv or arg == 'prefix':
            continue

        if arg in need_two_dashes:
            sp_args.append(f'--{arg}')
        else:
            sp_args.append(f'-{arg}')

        val = getattr(args, arg)
        if val is True:
            val = None

        if val is None:
            continue

        sp_args.append(val)

    wprefix_env = quote(f'WINEPREFIX={args.prefix}')
    log.debug('env %s %s', wprefix_env, ' '.join(quote(x) for x in sp_args))
    # pylint: disable=subprocess-run-check
    proc = sp.run(sp_args, stderr=sp.PIPE, env=env, text=True)
    stderr: str = proc.stderr.strip()
    exit_status = proc.returncode
    if stderr:
        for line in stderr.splitlines():
            if 'winemenubuilder.exe' in line or 'fixme:' in line:
                continue
            print(line, file=sys.stderr)
            exit_status = 1

    return exit_status


if __name__ == '__main__':
    sys.exit(main())
