#!/usr/bin/env python
# PYTHON_ARGCOMPLETE_OK
from datetime import date
from itertools import chain
from typing import Any, Final, Iterable, Iterator, Literal, Sequence, TextIO, TypedDict, cast
import argparse
import csv
import json
import sys

import argcomplete

RootKey = Literal['bookmark_bar', 'other']  # pylint: disable=invalid-name
StringTuple = tuple[str, str | None, str, str]
MICROSECONDS_PER_SECOND: Final[float] = 1e6
# https://github.com/chromium/chromium/blob/670ff74372d149d0ee4d733e2254a4a3d6b0ec6d/base/time/time.h#L499
TIME_TO_MICROSECOND_OFFSET: Final[int] = 11644473600000000


class SyncedDict(TypedDict):
    children: Sequence[Any]
    date_added: str
    date_modified: str
    guid: str
    id: str
    name: str
    sync_transaction_version: str
    type: str


class MetaInfo(TypedDict):
    last_visited_desktop: str


class URL(TypedDict):
    date_added: str
    guid: str
    id: str
    meta_info: MetaInfo | None
    name: str
    type: Literal['url']
    url: str


class Folder(TypedDict):
    children: Sequence[Any]  # URL or Folder
    date_added: str
    date_modified: str
    guid: str
    id: str
    name: str
    sync_transaction_version: str
    synced: SyncedDict
    type: Literal['folder']


class RootsDict(TypedDict):
    bookmark_bar: Folder
    other: Folder
    sync_transaction_version: str
    synced: SyncedDict


class Bookmarks(TypedDict):
    checksum: str
    roots: RootsDict
    sync_metadata: str
    version: int


def chrome_timestamp_to_date(timestamp: str) -> date:
    """
    https://github.com/chromium/chromium/blob/d7b85bd859088e217edeaa38d8629f181247b5cb/base/time/time_now_posix.cc#L73

    The date may be slightly off because tv.usec is not re-added but for Python
    date objects it may not matter.
    """
    return date.fromtimestamp(
        ((int(timestamp) - TIME_TO_MICROSECOND_OFFSET) / MICROSECONDS_PER_SECOND))


def get_strings(children: Iterable[URL | Folder],
                folder_names: bool = True,
                ignore_empty_names: bool = False,
                prefix: str | None = None) -> Iterator[StringTuple]:
    for x in children:
        if x['type'] == 'folder':
            name = x['name']
            yield from get_strings(x['children'],
                                   folder_names=folder_names,
                                   prefix=prefix + f' » {name}' if prefix else name,
                                   ignore_empty_names=ignore_empty_names)
        elif x['type'] == 'url':
            if not x['name'] and ignore_empty_names:
                continue
            name = x['name']
            if folder_names and prefix:
                name = f'{prefix} » {name}'
            last_visited = None
            if 'meta_info' in x:
                meta_info = x['meta_info']
                assert meta_info is not None
                last_visited = chrome_timestamp_to_date(
                    meta_info['last_visited_desktop']).strftime('%Y-%m-%d')
            yield (chrome_timestamp_to_date(
                x['date_added']).strftime('%Y-%m-%d'), last_visited, name, x['url'])


class Namespace(argparse.Namespace):
    ignore_empty_names: bool
    input: TextIO
    no_folder_names: bool
    output: TextIO
    verbose: bool


def main() -> int:
    parser = argparse.ArgumentParser(description='Convert Chrome Bookmarks file to CSV')
    parser.add_argument('-v', '--verbose', action='store_true')
    parser.add_argument('--ignore-empty-names',
                        action='store_true',
                        help='Skip bookmarks with empty names')
    parser.add_argument('--no-folder-names', action='store_true')
    parser.add_argument('input',
                        metavar='INPUT',
                        type=argparse.FileType('r'),
                        help=('Input Bookmarks JSON file '
                              '(such as ~/.config/chromium/Default/Bookmarks)'))
    parser.add_argument('output',
                        metavar='OUTPUT',
                        help='Output CSV file',
                        type=argparse.FileType('w'))
    argcomplete.autocomplete(parser)
    args = cast(Namespace, parser.parse_args())
    try:
        data = cast(Bookmarks, json.load(args.input))
        for root in ('bookmark_bar', 'other'):
            _ = data['roots'][root]['children']  # type: ignore[literal-required]
    except (json.decoder.JSONDecodeError, KeyError):
        args.output.close()
        print('Does not seem like a Bookmarks file', file=sys.stderr)
        return 1
    finally:
        args.input.close()
    csv.writer(args.output).writerows(
        [cast(StringTuple, ('Date added', 'Date last visited', 'Name', 'URL'))] + list(
            chain.from_iterable(
                get_strings(
                    data['roots'][root]['children'],  # type: ignore[literal-required]
                    folder_names=not args.no_folder_names,
                    ignore_empty_names=args.ignore_empty_names)
                for root in ('bookmark_bar', 'other'))))
    args.output.close()
    return 0


if __name__ == '__main__':
    sys.exit(main())
